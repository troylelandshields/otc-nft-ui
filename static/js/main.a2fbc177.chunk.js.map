{"version":3,"sources":["services/config.js","components/nav/NavBar.js","components/pages/Home.js","components/ui/nftmeta.js","components/pages/Counterfeit.js","App.js","index.js"],"names":["config","apiHost","env","ethAPIProvider","NavBar","Row","Col","Navbar","sticky","Nav","defaultActiveKey","Link","as","eventKey","to","Home","props","className","href","target","rel","NFTMeta","displayElement","handleChange","animationURL","imageURL","u","fileExt","split","pop","toLowerCase","isModel","max-width","auto-rotate","autoplay","camera-controls","src","ar-status","isVideo","height","muted","autoPlay","controlsList","loop","preload","alt","initialValues","meta","validate","values","changes","animation_url","image","Form","Group","controlId","NFTID","Label","Control","onChange","name","disabled","editable","type","placeholder","value","style","description","insert","remove","push","attributes","map","val","idx","formattedVal","inputType","max_value","display_type","moment","unix","format","origin","trait_type","onClick","Text","external_url","youtube_url","Counterfeit","useState","counterfeitContractAddr","setCounterfeitContractAddr","counterfeitTokenId","setCounterfeitTokenId","includeRugPull","setIncludeRugPull","add","rugPullDate","setRugPullDate","rugPullTime","setRugPullTime","checkoutReady","setIsCheckoutReady","isCheckingOut","setIsCheckingOut","walletConnected","setIsWalletConnected","order","setOrder","provider","setProvider","rugPullMeta","setRugPullMeta","useEffect","hasTokenDetails","window","ethereum","ethers","providers","Web3Provider","a","listAccounts","f","previewCounterfeit","e","preventDefault","console","log","rugPullDateTime","axios","post","resp","o","data","etherValue","utils","formatEther","TotalPriceInWei","alert","handleConnectWallet","request","method","handleCheckout","signer","getSigner","sendTransaction","OTCMarketContractAddr","BigNumber","from","trxn","OrderID","hash","parts","length","details","parseAndSetCounterfeitAddr","Check","checked","label","Button","variant","marginTop","marginBottom","v","App","Container","exact","path","component","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a2fbc177.chunk.js","sourcesContent":["const config = {\n    // apiHost: \"http://localhost:8000\",\n    apiHost: \"https://otc-nft-api.herokuapp.com\",\n    env: \"rinkeby\",\n    ethAPIProvider: \"https://eth-rinkeby.alchemyapi.io/v2/sl7kpn-EhhbJ_6B39V4uuMQNzGRjl-ei\"\n}\n\nexport default config;","import React, { Component } from 'react';\nimport { Navbar, Nav, Row, Col } from 'react-bootstrap';\nimport { Link, Redirect } from 'react-router-dom';\nimport config from '../../services/config.js';\n\nfunction NavBar() {\n    return (\n        <div>\n            <Row>\n                <Col>\n                    <h1>Over the Counter: NFTs for the Masses</h1> { config.env ? `(${config.env})` : null}\n                </Col>\n            </Row>  \n            <Navbar sticky=\"top\">\n                <Nav defaultActiveKey=\"home\">\n                    <Nav.Link as={Link} eventKey=\"home\" to={`/`}>Home</Nav.Link> \n                    <Nav.Link as={Link} eventKey=\"counterfeit\" to={`/counterfeit`}>Counterfeit</Nav.Link> \n                </Nav>\n            </Navbar>\n        </div>\n    )\n}\n\nexport default NavBar;","import React, { Component, useState } from 'react';\nimport { Row, Col } from 'react-bootstrap';\nimport axios from 'axios';\nimport config from '../../services/config.js';\n\n\nfunction Home(props) {\n\n\treturn (\n\t\t<Row>\n\t\t\t<Col className=\"col-md-4\">\n            \tStep 1: <a href=\"https://testnets.opensea.io/assets\" target=\"_blank\" rel=\"noreferrer\">Find an NFT</a> you love or want to sell.\n\t\t\t</Col>\n\t\t\t<Col className=\"col-md-4\">\n            \tStep 2: Put the URL into the Counterfeit page.\n\t\t\t</Col>\n\t\t\t<Col className=\"col-md-4\">\n            \tStep 3: Profit.\n\t\t\t</Col>\n\t\t</Row>  \n\t);\n}\n\n\nexport default Home;\n","import React, { Component, useEffect, useState } from 'react';\nimport { Row, Col, Form, Button } from 'react-bootstrap';\nimport { Formik, FieldArray } from 'formik';\nimport moment from 'moment';\nimport { Trash } from 'react-bootstrap-icons';\n\nfunction NFTMeta(props) {\n    let isModel = (u) => {\n        let fileExt = u.split('.').pop();\n        if (!fileExt) {\n            return false;\n        }\n\n        return fileExt.toLowerCase() === \"glb\";\n    };\n\n    let isVideo = (u) => {\n        let fileExt = u.split('.').pop();\n        if (!fileExt) {\n            return false;\n        }\n\n        return fileExt.toLowerCase() === \"mp4\" || fileExt.toLowerCase() === \"ogg\" || fileExt.toLowerCase() === \"webm\" || fileExt.toLowerCase() === \"ogv\";\n    };\n\n    let displayElement = (handleChange, animationURL, imageURL) => {\n        if (animationURL) {\n            if (isModel(animationURL)) {\n                return <model-viewer max-width=\"250px\" auto-rotate=\"true\" autoplay=\"true\" camera-controls=\"true\" src={animationURL} ar-status=\"not-presenting\"></model-viewer>\n            } \n            if (isVideo(animationURL)) {\n                return <video height=\"200px\" max-width=\"250px\" muted={true} autoPlay={true} controlsList=\"nodownload\" loop={true} preload=\"auto\" src={animationURL}></video>\n            } \n        }\n\n        return <img height=\"200px\" max-width=\"250px\" src={imageURL} alt=\"Error loading contract pic\"></img>\n    };\n\n\treturn (\n\t\t<Formik\n            initialValues={props.meta}\n            validate={values => {\n                const errors = {};\n                return errors;\n            }}\n        >\n        {({\n         values,\n         handleChange\n       }) => (\n           <>\n             {props.changes && props.changes(values)}\n                <Row>\n                    <Col className=\"col-md-6\">\n                        {displayElement(handleChange, values.animation_url, values.image)}\n                    </Col>\n                    <Col className=\"col-md-6\">\n                        <Form.Group controlId={\"nftmeta-name\"+values.NFTID}>\n                            <Form.Label>Name</Form.Label>\n                            <Form.Control onChange={handleChange} name=\"name\" disabled={!props.editable} type=\"text\" placeholder=\"NFT Name, go nuts\" value={values.name} />\n                        </Form.Group>\n                        <Form.Group controlId={\"nftmeta-desc\"+values.NFTID}>\n                            <Form.Label>Description</Form.Label>\n                            <Form.Control as=\"textarea\" disabled={!props.editable} onChange={handleChange} name=\"description\" style={{height:\"100%\"}} placeholder=\"NFT Description, make sure you sell its uniquness hard\" value={values.description} />\n                        </Form.Group>\n                    </Col>\n                </Row>\n                <h4>Attributes</h4>\n                <Row>\n                    <FieldArray name=\"attributes\">\n                    {({ insert, remove, push }) => (\n                        values.attributes.map((val, idx) => { \n                            val.formattedVal = val.value;\n\n                            if (val.value === \"number\") {\n                                val.inputType = \"number\";\n                            } else {\n                                val.inputType = \"text\";\n                            }\n\n                            if (val.max_value) {\n                                val.formattedVal = `${val.value} of ${val.max_value}`;\n                            }\n                            \n                            if (val.display_type === \"date\") {\n                                val.inputType = \"date\";\n                                val.formattedVal = moment.unix(val.value).format(\"YYYY-MM-DD\");\n                            }\n\n                            let disabled = !props.editable || val.origin === \"otc\" || !!val.max_value;\n\n                            return <Col key={idx} className=\"col-md-4\">\n                                {\n                                    <Form.Group controlId={\"nftmeta\"+idx}>\n                                        <Form.Label>{`${val.trait_type}`}</Form.Label> {!disabled ? <Trash onClick={()=> remove(idx)}></Trash> : null}\n                                        <Form.Control onChange={handleChange} name={`attributes.${idx}.value`} disabled={disabled} type={val.inputType} value={val.formattedVal} />\n                                        {val.display_type ? <Form.Text className=\"text-muted\">\n                                            {val.display_type}\n                                        </Form.Text> : null}\n                                    </Form.Group>\n                                }\n                            </Col>\n                        })\n                    )}\n                    </FieldArray>\n                </Row>\n                <Row>\n                    <Col className=\"col-md-12\">\n                        <Form.Group controlId={\"nftmeta-img-url\"+values.NFTID}>\n                            <Form.Label>Image URL</Form.Label>\n                            <Form.Control onChange={handleChange} name=\"image\" disabled={!props.editable} type=\"text\" placeholder=\"Image URL\" value={values.image} />\n                        </Form.Group>\n\n                        <Form.Group controlId={\"nftmeta-ext-url\"+values.NFTID}>\n                            <Form.Label>External URL</Form.Label>\n                            <Form.Control onChange={handleChange} name=\"external_url\"  disabled={!props.editable} type=\"text\" value={values.external_url} />\n                        </Form.Group>\n\n                        <Form.Group controlId={\"nftmeta-youtube-url\"+values.NFTID}>\n                            <Form.Label>Youtube URL</Form.Label>\n                            <Form.Control onChange={handleChange} name=\"youtube_url\"  disabled={!props.editable} type=\"text\" value={values.youtube_url} />\n                        </Form.Group>\n\n                        <Form.Group controlId={\"nftmeta-animation-url\"+values.NFTID}>\n                            <Form.Label>Animation URL</Form.Label>\n                            <Form.Control onChange={handleChange} name=\"animation_url\" disabled={!props.editable} type=\"text\" value={values.animation_url} />\n                        </Form.Group>\n                    </Col>\n                </Row>\n                </>\n            )}\n\t\t</Formik>\n\t);\n}\n\n\nexport default NFTMeta;\n\n\n// {\n// \t\"OrderID\": \"50bc8957-216d-4974-9f62-e7646e412071\",\n// \t\"NFTID\": \"293285d3-8467-40c8-a8cf-d0e3b614c676\",\n// \t\"Hash\": \"ec4955ca-b045-4d8b-8da1-56787ea0a74b\",\n// \t\"SubtotalInWei\": 100000000000000000,\n// \t\"EstimatedGasCost\": 300000000000000,\n// \t\"TotalPriceInWei\": 100300000000000000\n//   }","import React, { Component, useEffect, useState } from 'react';\nimport { Row, Col, Form, Button } from 'react-bootstrap';\nimport NFTMeta from '../ui/nftmeta.js';\nimport axios from 'axios';\nimport config from '../../services/config.js';\n// import Web3 from 'web3';\nimport { ethers } from \"ethers\";\nimport moment from 'moment';\n\n// const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n// web3.eth.getAccounts().then(console.log);\n\n// const ethEnabled = () => {\n// \tif (window.ethereum) {\n// \t  window.web3 = new Web3(window.ethereum);\n// \t  window.ethereum.enable();\n// \t  return true;\n// \t}\n// \treturn false;\n// }\n\nfunction Counterfeit(props) {\n\t// https://testnets.opensea.io/assets/0x99bae45fb8abab73d8969fad837f5287ec294eea/1\n\n\tlet [ counterfeitContractAddr, setCounterfeitContractAddr ] = useState(\"\");\n\tlet [ counterfeitTokenId, setCounterfeitTokenId ] = useState(\"\");\n\tlet [ includeRugPull, setIncludeRugPull ] = useState(false);\n\tlet [ rugPullDate, setRugPullDate ] = useState(moment().add(1, \"month\").format(\"YYYY-MM-DD\"));\n\tlet [ rugPullTime, setRugPullTime ] = useState(\"12:00\");\n\tlet [ checkoutReady, setIsCheckoutReady ] = useState(false);\n\tlet [ isCheckingOut, setIsCheckingOut ] = useState(false);\n\tlet [ walletConnected, setIsWalletConnected ] = useState(false);\n\tlet [ order, setOrder ] = useState(null);\n\tlet [ provider, setProvider ] = useState(null);\n\tlet [ rugPullMeta, setRugPullMeta ] = useState(null);\n\n\n\tuseEffect(() => {\n\t\tlet hasTokenDetails = !!counterfeitContractAddr && !!counterfeitTokenId;\n\t\tif (includeRugPull) {\n\t\t\tsetIsCheckoutReady(hasTokenDetails && !!rugPullDate && !!rugPullTime);\n\t\t}\n\t\tsetIsCheckoutReady(hasTokenDetails);\n\t}, [counterfeitContractAddr, counterfeitTokenId, includeRugPull, rugPullDate, rugPullTime]);\n\n\tuseEffect(() => {\n\t\tsetIsCheckingOut(!!order);\n\t}, [order]);\n\n\n\tuseEffect(() => {\n\t\tif (window.ethereum) {\n\t\t\tconst provider = new ethers.providers.Web3Provider(window.ethereum);\n\t\t\tsetProvider(provider);\n\t\t}\n\t}, [order]);\n\n\tuseEffect(() => {\n\t\tlet f = async () => {\n\t\t\tif (!provider) { return; }\n\t\t\tsetIsWalletConnected(await provider.listAccounts() > 0);\n\t\t};\n\t\tf();\n\t}, [provider]);\n\n\tlet parseAndSetCounterfeitAddr = (val) => {\n\t\tlet parts = val.split(\"assets\");\n\t\tif (!parts || parts.length !== 2) {\n\t\t\tsetCounterfeitContractAddr(val);\n\t\t\treturn\n\t\t}\n\t\t\n\t\tlet details = parts[1].split(\"/\");\n\t\tif (!details || details.length !== 3) {\n\t\t\tsetCounterfeitContractAddr(val);\n\t\t\treturn\n\t\t}\n\n\t\tsetCounterfeitContractAddr(details[1]);\n\t\tsetCounterfeitTokenId(details[2]);\n\t}\n\n\tlet previewCounterfeit = async (e) => {\n\t\te.preventDefault();\n\t\tconsole.log(counterfeitTokenId, counterfeitContractAddr);\n\n\t\ttry {\n\t\t\tlet rugPullDateTime;\n\t\t\tif (includeRugPull) {\n\t\t\t\trugPullDateTime = moment(rugPullDate + \" \" + rugPullTime).format();\n\t\t\t}\n\n\t\t\tlet resp = await axios.post(`${config.apiHost}/api/v1/preview`, {\n\t\t\t\t\"Type\": \"contract\",\n\t\t\t\t\"ContractAddr\": counterfeitContractAddr,\n\t\t\t\t\"CounterfeitTokenID\": counterfeitTokenId,\n\t\t\t\t\"RugPullTime\": rugPullDateTime,\n\t\t\t});\n\n\t\t\tlet o = resp.data;\n\n\t\t\tconst etherValue = ethers.utils.formatEther(o.TotalPriceInWei+\"\");\n\t\t\tconsole.log(etherValue);\n\n\t\t\to.etherValue = etherValue;\n\n\t\t\tsetOrder(o);\n\n\t\t} catch (e) {\n\t\t\tconsole.log(\"Error occurred when attempting to go to checkout.\", e);\n\t\t\talert(\"It looks like that NFT isn't yet supported by OTC; we're working on it, but in the meantime try another one.\")\n\t\t}\n\t};\n\n\tlet handleClear = (e) => {\n\t\te.preventDefault();\n\t\tsetCounterfeitContractAddr(\"\");\n\t\tsetCounterfeitTokenId(\"\");\n\t\tsetIncludeRugPull(false);\n\t\tsetOrder(null);\n\t\tsetRugPullMeta(null);\n\t};\n\n\tlet handleConnectWallet = async (e) => {\n\t\ttry {\n\t\t\tawait window.ethereum.request({ method: 'eth_requestAccounts' });\n\t\t\tsetIsWalletConnected(true);\n\t\t} catch (e) {\n\t\t\tconsole.log(\"Error requesting accounts\", e);\n\t\t}\n\t};\n\n\tlet handleCheckout = async (e) => {\n\t\ttry {\n\t\t\tlet signer = provider.getSigner();\n\t\t\tconst trxn = await signer.sendTransaction({\n\t\t\t\tto: order.OTCMarketContractAddr,\n\t\t\t\tvalue: ethers.BigNumber.from(order.TotalPriceInWei+\"\")\n\t\t\t});\n\n\t\t\tawait axios.post(`${config.apiHost}/api/v1/mint/${order.OrderID}`, {\n\t\t\t\t\"OrderID\": order.OrderID,\n\t\t\t\t\"PaymentTransactionID\": trxn.hash,\n\t\t\t\t\"DestinationAddress\": trxn.from,\n\t\t\t\t\"NFTMeta\": rugPullMeta\n\t\t\t});\n\n\t\t\talert(\"Success! You'll have a newly minted NFT shortly\");\n\t\t\tsetCounterfeitContractAddr(\"\");\n\t\t\tsetCounterfeitTokenId(\"\");\n\t\t\tsetIncludeRugPull(false);\n\t\t\tsetRugPullMeta(null);\n\t\t\tsetOrder(null);\n\t\t} catch (e) {\n\t\t\tconsole.log(\"Error finishing transaction\", e);\n\t\t\talert(\"Uhhh, something went wrong... contact me about getting this worked out.\")\n\t\t}\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<Form>\n\t\t\t\t<Form.Group controlId=\"counterfeitContractAddr\">\n\t\t\t\t\t<Form.Label>Contract Address</Form.Label>\n\t\t\t\t\t<Form.Control disabled={isCheckingOut} value={counterfeitContractAddr} onChange={(e) => parseAndSetCounterfeitAddr(e.target.value)} type=\"text\" placeholder=\"Paste a link from OpenSea or any ERC721 contract's ethereum address\" />\n\t\t\t\t\t<Form.Text className=\"text-muted\">\n\t\t\t\t\t\tIf this is wrong I don't want to be right.\n\t\t\t\t\t</Form.Text>\n\t\t\t\t</Form.Group>\n\n\t\t\t\t{ counterfeitContractAddr ? <>\n\t\t\t\t\t<Form.Group controlId=\"counterfeitTokenId\">\n\t\t\t\t\t\t<Form.Label>Token ID</Form.Label>\n\t\t\t\t\t\t<Form.Control disabled={isCheckingOut} value={counterfeitTokenId} onChange={(e) => setCounterfeitTokenId(e.target.value)} type=\"text\" placeholder=\"Input the Token ID you want\" />\n\t\t\t\t\t</Form.Group> \n\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Col className=\"col-md-4\">\n\t\t\t\t\t\t\t<Form.Group controlId=\"includeRugPull\">\n\t\t\t\t\t\t\t\t<Form.Check disabled={isCheckingOut} checked={includeRugPull} onChange={(e) => setIncludeRugPull(e.target.checked)} type=\"checkbox\" label=\"Include Rug Pull\" />\n\t\t\t\t\t\t\t\t<Form.Text className=\"text-muted\">\n\t\t\t\t\t\t\t\t\tA rugpull will change the metadata of the contract on a certain date; let's you do some pretty classic pranks on your friends. Be aware that this is associated with an increased cost.\n\t\t\t\t\t\t\t\t</Form.Text>\n\t\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t{ includeRugPull ? <>\n\t\t\t\t\t\t\t\t<Col className=\"col-md-4\">\n\t\t\t\t\t\t\t\t\t<Form.Group controlId=\"rugPullTime\">\n\t\t\t\t\t\t\t\t\t\t<Form.Control disabled={isCheckingOut} value={rugPullDate} onChange={(e) => setRugPullDate(e.target.value)} type=\"date\" />\n\t\t\t\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t\t<Col className=\"col-md-4\">\n\t\t\t\t\t\t\t\t\t<Form.Group controlId=\"rugPullTime\">\n\t\t\t\t\t\t\t\t\t\t<Form.Control disabled={isCheckingOut} value={rugPullTime} onChange={(e) => setRugPullTime(e.target.value)} type=\"time\" />\n\t\t\t\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t: null }\n\t\t\t\t\t</Row>\n\t\t\t\t\t</>\n\t\t\t\t\t: null\n\t\t\t\t}\n\n\t\t\t\t{\n\t\t\t\t\t!isCheckingOut ? \n\t\t\t\t\t<Button variant=\"primary\" onClick={previewCounterfeit} disabled={!checkoutReady}>\n\t\t\t\t\t\tGo to Checkout\n\t\t\t\t\t</Button>\n\t\t\t\t\t: \t\t\t\t\n\t\t\t\t\t<Button variant=\"default\" onClick={handleClear}>\n\t\t\t\t\t\tClear\n\t\t\t\t\t</Button>\n\t\t\t\t}\n\t\t\t</Form>\n\n\t\t\t{ order ?\n\t\t\t\t<div>\n\t\t\t\t\t<hr style={{marginTop:\"30px\", marginBottom:\"30px\"}}></hr>\n\t\t\t\t\t<Row>\n\t\t\t\t\t\t<Col className=\"col-md-6\">\n\t\t\t\t\t\t\t<h3>\n\t\t\t\t\t\t\t\tContract Details\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t<NFTMeta meta={order.NFTMeta}></NFTMeta>\n\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t{ includeRugPull ? <Col className=\"col-md-6\">\n\t\t\t\t\t\t\t<h3>\n\t\t\t\t\t\t\t\tRug Pull Details\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t<NFTMeta meta={order.NFTMeta} editable={true} changes={(v) => setRugPullMeta(v)}></NFTMeta>\n\t\t\t\t\t\t</Col> : null }\n\t\t\t\t\t</Row>\n\n\n\t\t\t\t\t<hr style={{marginTop:\"30px\", marginBottom:\"30px\"}}></hr>\n\t\t\t\t\t<Form>\n\t\t\t\t\t\t<Form.Group controlId=\"totalPrice\">\n\t\t\t\t\t\t\t<Form.Label>Total Price</Form.Label>\n\t\t\t\t\t\t\t<Form.Control disabled type=\"text\" value={order.etherValue + \" ETH\"} />\n\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t<Form.Group controlId=\"connectWallet\">\n\t\t\t\t\t\t<Button disabled={walletConnected} variant=\"primary\" onClick={handleConnectWallet}>\n\t\t\t\t\t\t\t1. Connect Wallet\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t\t<Form.Group>\n\t\t\t\t\t\t<Button disabled={!walletConnected} variant=\"primary\" onClick={handleCheckout}>\n\t\t\t\t\t\t\t2. Finish Transaction to Mint NFT\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t</Form.Group>\n\t\t\t\t\t</Form>\n\n\t\t\t\t</div>\n\t\t\t\t: null\n\t\t\t}\n\n\t\t</div>\n\t);\n}\n\n\nexport default Counterfeit;\n\n\n// {\n// \t\"OrderID\": \"50bc8957-216d-4974-9f62-e7646e412071\",\n// \t\"NFTID\": \"293285d3-8467-40c8-a8cf-d0e3b614c676\",\n// \t\"Hash\": \"ec4955ca-b045-4d8b-8da1-56787ea0a74b\",\n// \t\"SubtotalInWei\": 100000000000000000,\n// \t\"EstimatedGasCost\": 300000000000000,\n// \t\"TotalPriceInWei\": 100300000000000000\n//   }","import React, { Component } from 'react';\n// import Radium from 'radium';\nimport { Container } from 'react-bootstrap';\nimport { Route } from 'react-router-dom';\nimport NavBar from './components/nav/NavBar.js';\nimport Home from './components/pages/Home.js';\nimport Counterfeit from './components/pages/Counterfeit.js';\n\nimport './App.css';\nimport config from './services/config';\n\nclass App extends Component {\n  render() {\n\n    return (\n      <Container>\n        <div>\n            <NavBar></NavBar>\n\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/counterfeit\" component={Counterfeit} />\n            {/* <Route path=\"/settings/:userId\" component={Settings} /> */}\n        </div>\n\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { HashRouter as Router } from \"react-router-dom\";\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n        <App/>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}